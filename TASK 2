import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Step 1: Load Dataset
# Replace with your dataset path
data = pd.read_csv('D:\Downloads\creditcard.csv.zip')

# Step 2: Preprocessing
# Assuming 'Class' is the target column (1 = Fraud, 0 = Legit)
X = data.drop(columns=['Class'])
y = data['Class']

# Normalize the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 3: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 4: Isolation Forest
iso_forest = IsolationForest(contamination=0.01, random_state=42)
iso_forest.fit(X_train)

# Predictions for Isolation Forest
y_pred_iso = iso_forest.predict(X_test)
y_pred_iso = [1 if pred == -1 else 0 for pred in y_pred_iso]

# Step 5: Local Outlier Factor
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)
y_pred_lof = lof.fit_predict(X_test)
y_pred_lof = [1 if pred == -1 else 0 for pred in y_pred_lof]

# Step 6: Evaluation
print("Isolation Forest Results")
print(classification_report(y_test, y_pred_iso))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_iso))
print("ROC AUC Score:", roc_auc_score(y_test, y_pred_iso))

print("\nLocal Outlier Factor Results")
print(classification_report(y_test, y_pred_lof))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_lof))
print("ROC AUC Score:", roc_auc_score(y_test, y_pred_lof))
